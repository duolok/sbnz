package rules.backward;

import com.ftn.sbnz.model.models.*;
import java.util.List;
import org.kie.api.runtime.rule.QueryResults;

global List enemyCandidates;

query "level1_regionMatch"(String enemyName, String region)
    Enemy(name == enemyName, region == region)
end

query "level2_difficultyAndLevel"(String enemyName, String region, String difficulty, int playerLevel)
    level1_regionMatch(enemyName, region;)
    $enemy : Enemy(name == enemyName)
    eval(
        (difficulty.equals("easy") && $enemy.getType().equals("regular"))
        || (difficulty.equals("medium") && ($enemy.getType().equals("regular") || $enemy.getType().equals("elite")))
        || (difficulty.equals("medium-hard") && !$enemy.getType().equals("boss"))
        || (difficulty.equals("hard"))
    )
    eval(
        (playerLevel <= 20 && $enemy.getHp() <= 2000)
        || (playerLevel > 20 && playerLevel <= 50 && $enemy.getHp() <= 5000)
        || (playerLevel > 50)
    )
end

query "level3_buildAndEquipment"(String enemyName, String region, String difficulty, int playerLevel, String playerClass)
    level2_difficultyAndLevel(enemyName, region, difficulty, playerLevel;)
    $enemy : Enemy(name == enemyName)
    eval(
        (playerClass.equals("STRENGTH") && 
         ($enemy.getAbilities().contains("ranged") || $enemy.getAbilities().contains("magic")))
        ||
        (playerClass.equals("DEX") && $enemy.getDefense() > 200)
        ||
        (playerClass.equals("MAGIC") && !$enemy.getResistances().contains("magic"))
        ||
        (!playerClass.equals("STRENGTH") && !playerClass.equals("DEX") && !playerClass.equals("MAGIC"))
    )
end

query "findValidCandidate"(String candidateName, String region, String difficulty, int playerLevel, String playerClass)
    (
        // BAZA: Kandidat direktno prolazi validaciju
        level3_buildAndEquipment(candidateName, region, difficulty, playerLevel, playerClass;)
    )
    or
    (
        // REKURZIVNI SLUČAJ: Postoji sekvenca ka sledećem kandidatu
        CandidateSequence(candidateName, nextCandidate;)
        and
        // Sledeći kandidat je validan (rekurzivni poziv)
        findValidCandidate(nextCandidate, region, difficulty, playerLevel, playerClass;)
    )
end

// ==================== TARGET ENEMY CHECK ====================
rule "Check Target Enemy First"
    agenda-group "backward-chain"
    salience 1000
    no-loop true
    when
        $query : BackwardQuery(
            processed == false,
            recursionStarted == false,
            $targetName : targetEnemy,
            $targetName != null
        )
        $context : GameContext() from $query.getContext()
        $player : Player() from $context.getPlayer()
        $targetEnemy : Enemy(name == $targetName)
        $playerClassStr : String() from $player.getPlayerClass().toString()
        
        level3_buildAndEquipment(
            $targetName, 
            $context.getRegion(), 
            $context.getDifficulty(),
            $player.getLevel(), 
            $playerClassStr
        ;)
    then
        System.out.println("\nTARGET ENEMY PASSED ALL CONDITIONS ✓✓✓");
        System.out.println("  Target: " + $targetName);
        System.out.println("  Region: " + $targetEnemy.getRegion());
        System.out.println("  Type: " + $targetEnemy.getType());
        System.out.println("  HP: " + $targetEnemy.getHp() + ", DMG: " + $targetEnemy.getDamage());
        
        modify($query) {
            setSelectedEnemy($targetName),
            setConditionsMet(true),
            setProcessed(true)
        }
end

rule "Target Failed - Start Recursive Query"
    agenda-group "backward-chain"
    salience 900
    no-loop true
    when
        $query : BackwardQuery(
            processed == false,
            recursionStarted == false,
            $targetName : targetEnemy,
            $targetName != null
        )
        $context : GameContext() from $query.getContext()
        $player : Player() from $context.getPlayer()
        $targetEnemy : Enemy(name == $targetName)
        $playerClassStr : String() from $player.getPlayerClass().toString()
        
        not level3_buildAndEquipment(
            $targetName, 
            $context.getRegion(), 
            $context.getDifficulty(),
            $player.getLevel(), 
            $playerClassStr
        ;)
    then
        System.out.println("\nTARGET ENEMY FAILED TREE VALIDATION");
        System.out.println("  Target: " + $targetName);
        
        QueryResults level1 = drools.getKieRuntime().getQueryResults(
            "level1_regionMatch", $targetName, $context.getRegion());
        
        if (level1.size() == 0) {
            System.out.println("FAILED at LEVEL 1 (OR): Region mismatch");
        } else {
            QueryResults level2 = drools.getKieRuntime().getQueryResults(
                "level2_difficultyAndLevel", 
                $targetName, 
                $context.getRegion(),
                $context.getDifficulty(), 
                $player.getLevel());
            
            if (level2.size() == 0) {
                System.out.println("  └─ FAILED at LEVEL 2 (AND): Difficulty/Level");
            } else {
                System.out.println("  └─ FAILED at LEVEL 3 (AND): Build/Equipment");
            }
        }
        
        modify($query) {
            setRecursionStarted(true)
        }
end

rule "Create Candidate Sequence Chain"
    agenda-group "backward-chain"
    salience 510
    no-loop true
    when
        $query : BackwardQuery(
            processed == false,
            recursionStarted == true,
            $candidateList : candidateNames,
            candidateNames.size() > 0
        )
        $context : GameContext() from $query.getContext()
        $player : Player() from $context.getPlayer()
        $playerClassStr : String() from $player.getPlayerClass().toString()
    then
        for (int i = 0; i < $candidateList.size() - 1; i++) {
            String current = (String) $candidateList.get(i);
            String next = (String) $candidateList.get(i + 1);
            
            CandidateSequence sequence = new CandidateSequence(
                current, 
                next,
                $context.getRegion(),
                $context.getDifficulty(),
                $player.getLevel(),
                $playerClassStr
            );
            
            insert(sequence);
            System.out.println("  [" + i + "] " + current + " → " + next);
        }
        
        System.out.println("  Chain created with " + ($candidateList.size() - 1) + " links");
end

rule "Find First Valid Candidate Through Recursive Query"
    agenda-group "backward-chain"
    salience 500
    no-loop true
    when
        $query : BackwardQuery(
            processed == false,
            recursionStarted == true,
            $candidateList : candidateNames,
            candidateNames.size() > 0
        )
        $context : GameContext() from $query.getContext()
        $player : Player() from $context.getPlayer()
        $playerClassStr : String() from $player.getPlayerClass().toString()
        
        $firstCandidate : String() from $candidateList.get(0)
        
        findValidCandidate(
            $firstCandidate,
            $context.getRegion(),
            $context.getDifficulty(),
            $player.getLevel(),
            $playerClassStr
        ;)
        
        $enemy : Enemy()
    then
        System.out.println("\nRECURSIVE QUERY FOUND VALID CANDIDATE ✓✓✓");
        System.out.println("  Found: " + $enemy.getName());
        System.out.println("  Region: " + $enemy.getRegion());
        System.out.println("  Type: " + $enemy.getType());
        System.out.println("  HP: " + $enemy.getHp() + ", DMG: " + $enemy.getDamage());
        System.out.println("  Recursive traversal completed!");
        
        modify($query) {
            setSelectedEnemy($enemy.getName()),
            setConditionsMet(true),
            setProcessed(true)
        }
end

rule "Regional Fallback"
    agenda-group "backward-chain"
    salience 380
    no-loop true
    when
        $query : BackwardQuery(
            processed == true,
            selectedEnemy == null,
            fallbackEnemy == null
        )
        $context : GameContext() from $query.getContext()
        $fallback : Enemy(region == $context.getRegion())
    then
        System.out.println("\nAPPLYING REGIONAL FALLBACK");
        System.out.println("  Fallback: " + $fallback.getName());
        
        modify($query) {
            setFallbackEnemy($fallback.getName())
        }
end

rule "Ultimate Fallback"
    agenda-group "backward-chain"
    salience 370
    no-loop true
    when
        $query : BackwardQuery(
            processed == true,
            selectedEnemy == null,
            fallbackEnemy == null
        )
        $context : GameContext() from $query.getContext()
        not Enemy(region == $context.getRegion())
        $anyEnemy : Enemy()
    then
        System.out.println("\nULTIMATE FALLBACK");
        modify($query) {
            setFallbackEnemy($anyEnemy.getName())
        }
end